[Server Options]
    #The <port> the server will be listening to;
    server_port=9003

    #The flag indicating whether a TLS server is to be started for WSS protocol;
    is_tls_server=true

    #Defines the TLS mode, as defined by Mozilla:
    #    https://wiki.mozilla.org/Security/Server_Side_TLS)
    #The value can be one of:
    #    {old/int/mod/undef}
    #where 'undef' is only used for 'is_tls_server=false' and
    #the other modes are as follows:
    #    1. 'old' (Mozilla Old) - is for SSL v3 or higher
    #    2. 'int' (Mozilla Intermediate) - is for TLS v1 or higher
    #    3. 'mod' (Mozilla Modern) - is for TLS v2 or higher
    #May be left empty or set to 'undef' for 'is_tls_server=false'
    tls_mode=mod

    #Defines the SSL certificate file name (*.crt or *.pem);
    #May be left empty for when 'is_tls_server=false'
    tls_crt_file=./certificates/client2048.crt

    #Defines the SSL private key file name (*.key or *.pem);
    #generated from the certificate file. May be left empty
    #for when 'is_tls_server=false'
    tls_key_file=./certificates/client2048.key

    #Defines the temporary DH (Diffie-Hellman) parameters file name (*.pem);
    #Example method of generating this file:
    #    openssl dhparam -out dh.pem 2048
    #The DH parameter size is to be chosen as follows:
    #    Mozilla Old - suggests 1024 as the minimum size to use, using
    #                  smaller size will cause TLS handshake failure!
    #    Mozilla Intermediate - suggests 2048 as the minimum size to use
    #    Mozilla Modern - suggests not using DH at all but we still allow
    #May be left empty for 'is_tls_server=false'
    tls_tmp_dh_file=./certificates/dh2048.pem

    #Allows to define the ciphers (https://en.wikipedia.org/wiki/Cipher_suite)
    #to be used with TLS handshake; If not defined or empty then default system
    #ciphers will be used. USING WRONG CIPHERS MAY CAUSE TLS HANDSHAKE FAILURE!
    #Note that, Mozilla defines suggested ciphers per TLS mode here:
    #    https://wiki.mozilla.org/Security/Server_Side_TLS)
    #The OpenSSL function used to set ciphers documentation is here:
    #    https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_cipher_list.html
    #More information and ciphers and choosing them can be found here:
    #    https://technology.amis.nl/2017/07/04/ssltls-choose-cipher-suite/
    #This parameter is only used for when 'is_tls_server=true'
    tls_ciphers=ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

    #The number of threads to handle the text processing requests;
    num_threads=20

    #The folder for storing the input and output text files;
    work_dir=./proc_text

    #Pre-processor script call template;
    #The <WORK_DIR> the work directory where the files are stored
    #The <JOB_UID> the unique processor job identifier.
    #The <LANGUAGE> the source language name
    #The input source text file will have a name:
    #    <JOB_UID>.pre.in.txt
    #The output source text file shall get a name:
    #    <JOB_UID>.pre.out.txt
    #Note that: After the server pre-processing job is finished the
    #           input and output source text files are deleted. 
    #           If need to be kept for e.g. post-processing the pre-
    #           processing script must do a back-up itself.
    pre_call_templ=../script/text/pre_process.sh --work-dir=<WORK_DIR> --job-uid=<JOB_UID> --lang=<LANGUAGE>
    
    #Post-processor script call template;
    #The <WORK_DIR> the work directory where the files are stored
    #The <JOB_UID> the unique processor job identifier.
    #The <LANGUAGE> the target language name
    #The input target text file has a name:
    #    <JOB_UID>.post.in.txt
    #The output target text file shall get a name:
    #    <JOB_UID>.post.out.txt
    #The presence of the corresponding pre-processor job files:
    #    <JOB_UID>.pre.in.txt
    #    <JOB_UID>.pre.out.txt
    #is not default and is to be taken care of by a concrete
    #pre-processor script implementation.
    post_call_templ=../script/text/post_process.sh --work-dir=<WORK_DIR> --job-uid=<JOB_UID> --lang=<LANGUAGE>
